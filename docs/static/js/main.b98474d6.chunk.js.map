{"version":3,"sources":["assets/socials.tsx","pages/Home.tsx","assets/pages.tsx","assets/projects.tsx","pages/NoMatch.tsx","App.tsx","assets/theme.ts","index.tsx"],"names":["socials","name","url","icon","htmlColor","useHomeStyle","makeStyles","theme","userbox","display","alignItems","justifyContent","marginTop","spacing","socialsbox","flexDirection","padding","username","marginLeft","Home","classes","Box","className","Avatar","src","Typography","variant","Paper","map","social","socialIndex","IconButton","key","aria-label","onClick","window","open","SvgIcon","style","cursor","component","align","pages","Component","props","projects","owner","repo","NoMatch","useAppStyle","root","flexGrow","appbar","zIndex","drawer","menuButton","marginRight","toolbar","avatar","width","flexShrink","drawerPaper","drawerContainer","overflow","drawerlink","color","textDecoration","drawerSeparator","backgroundColor","palette","grey","content","ProjectItem","project","useState","info","setInfo","useEffect","fetch","then","r","json","ListItem","button","undefined","ListItemIcon","Badge","badgeContent","stargazers_count","ListItemText","primary","Skeleton","animation","height","App","AppBar","Toolbar","Drawer","paper","List","page","pageIndex","to","Divider","projectIndex","exact","path","render","createMuiTheme","main","secondary","error","red","A400","background","default","ReactDOM","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.b98474d6.chunk.js","sourcesContent":["import React, { JSXElementConstructor } from 'react'\n\nimport FacebookIcon from '@material-ui/icons/Facebook'\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\nimport InstagramIcon from '@material-ui/icons/Instagram'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport TwitterIcon from '@material-ui/icons/Twitter'\n\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent'\nimport { SvgIconTypeMap } from '@material-ui/core/SvgIcon/SvgIcon'\n\ninterface Social {\n  name: string\n  url: string\n  icon: JSXElementConstructor<OverridableComponent<SvgIconTypeMap<{}, 'svg'>>>\n}\n\nconst socials: Social[] = [\n  {\n    name: 'facebook',\n    url: 'https://www.facebook.com/G.Cardamone2',\n    icon: () => <FacebookIcon htmlColor='#3b5998' />,\n  },\n  {\n    name: 'LinkedIn',\n    url: 'https://www.linkedin.com/in/giovanni-cardamone-41306973/',\n    icon: () => <LinkedInIcon htmlColor='#0e76a8' />,\n  },\n  {\n    name: 'Instagram',\n    url: 'https://instagram.com/giovannicardamone/',\n    icon: () => <InstagramIcon htmlColor='#cd486b' />,\n  },\n  {\n    name: 'GitHub',\n    url: 'https://github.com/GiovanniCardamone',\n    icon: () => <GitHubIcon htmlColor='#24292e' />,\n  },\n  {\n    name: 'Twitter',\n    url: 'https://twitter.com/GiovanniCardam2',\n    icon: () => <TwitterIcon htmlColor='#1a91da' />,\n  },\n]\n\nexport default socials\n","import React from 'react'\n\nimport socials from '../assets/socials'\n\nimport Paper from '@material-ui/core/Paper'\nimport Avatar from '@material-ui/core/Avatar'\nimport Box from '@material-ui/core/Box'\nimport IconButton from '@material-ui/core/IconButton'\nimport SvgIcon from '@material-ui/core/SvgIcon'\nimport Typography from '@material-ui/core/Typography'\n\nimport makeStyles from '@material-ui/core/styles/makeStyles'\n\nconst useHomeStyle = makeStyles((theme) => ({\n  userbox: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: theme.spacing(1),\n  },\n  socialsbox: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n  username: {\n    marginLeft: theme.spacing(1),\n  },\n}))\n\ninterface HomeProps {}\n\nexport default function Home({}: HomeProps) {\n  const classes = useHomeStyle()\n\n  return (\n    <Box className={classes.userbox}>\n      <Box>\n        <Avatar src='https://avatars0.githubusercontent.com/u/5117748?s=460&u=d3e29f822ff593d2e796a3c69f3ef58dabf0733a&v=4' />\n        <Typography variant='subtitle2' className={classes.username}>\n          Giovanni\n          <br />\n          Cardamone\n        </Typography>\n      </Box>\n      <Paper className={classes.socialsbox}>\n        <Box>\n          {socials.map((social, socialIndex) => (\n            <IconButton key={socialIndex} aria-label={social.name} onClick={() => window.open(social.url, '_blank')}>\n              <SvgIcon style={{ cursor: 'pointer' }} component={social.icon} />\n            </IconButton>\n          ))}\n        </Box>\n        <Typography align='center' variant='body2'>\n          Follow me!\n        </Typography>\n      </Paper>\n    </Box>\n  )\n}\n","import React, { JSXElementConstructor } from 'react'\n\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent'\nimport { SvgIconTypeMap } from '@material-ui/core/SvgIcon/SvgIcon'\n\nimport HomeIcon from '@material-ui/icons/Home'\nimport Home from '../pages/Home'\n\nimport ContactMeIcon from '@material-ui/icons/RecentActors'\n\nimport CurriculumIcon from '@material-ui/icons/InsertDriveFile'\n\ninterface Page {\n  name: string\n  url: string\n  icon: JSXElementConstructor<OverridableComponent<SvgIconTypeMap<{}, 'svg'>>>\n  Component: JSXElementConstructor<any>\n}\n\nconst pages: Page[] = [\n  {\n    name: 'Home',\n    url: '/home',\n    icon: () => <HomeIcon />,\n    Component: (props) => <Home {...props} />,\n  },\n  {\n    name: 'Contact Me',\n    url: '/contacts',\n    icon: () => <ContactMeIcon />,\n    Component: (props) => <Home {...props} />,\n  },\n  {\n    name: 'Curriculum',\n    url: '/curriculum',\n    icon: () => <CurriculumIcon />,\n    Component: (props) => <Home {...props} />,\n  },\n]\n\nexport default pages\n","import React, { JSXElementConstructor } from 'react'\n\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent'\nimport { SvgIconTypeMap } from '@material-ui/core/SvgIcon/SvgIcon'\n\nimport FastifyAutoroutesIcon from '@material-ui/icons/Http'\n\nexport interface Project {\n  // label: string\n  url: string\n  owner: string\n  repo: string\n  icon?: JSX.Element\n}\n\nconst projects: Project[] = [\n  {\n    url: 'https://github.com/GiovanniCardamone/fastify-autoroutes',\n    owner: 'GiovanniCardamone',\n    repo: 'fastify-autoroutes',\n    icon: <FastifyAutoroutesIcon />,\n  },\n]\n\nexport default projects\n\nexport interface GitHubProject {\n  id: string //285528829\n  node_id: string //'MDEwOlJlcG9zaXRvcnkyODU1Mjg4Mjk='\n  name: string //'fastify-autoroutes'\n  full_name: string //'GiovanniCardamone/fastify-autoroutes'\n  private: boolean\n  owner: {\n    login: string // 'GiovanniCardamone'\n    id: number //5117748\n    node_id: string //'MDQ6VXNlcjUxMTc3NDg='\n    avatar_url: string //'https://avatars0.githubusercontent.com/u/5117748?v=4'\n    gravatar_id: string //''\n    url: string //'https://api.github.com/users/GiovanniCardamone'\n    html_url: string //'https://github.com/GiovanniCardamone'\n    followers_url: string //'https://api.github.com/users/GiovanniCardamone/followers'\n    following_url: string //'https://api.github.com/users/GiovanniCardamone/following{/other_user}'\n    gists_url: string //'https://api.github.com/users/GiovanniCardamone/gists{/gist_id}'\n    starred_url: string //'https://api.github.com/users/GiovanniCardamone/starred{/owner}{/repo}'\n    subscriptions_url: string //'https://api.github.com/users/GiovanniCardamone/subscriptions'\n    organizations_url: string //'https://api.github.com/users/GiovanniCardamone/orgs'\n    repos_url: string //'https://api.github.com/users/GiovanniCardamone/repos'\n    events_url: string //'https://api.github.com/users/GiovanniCardamone/events{/privacy}'\n    received_events_url: string //'https://api.github.com/users/GiovanniCardamone/received_events'\n    type: 'User'\n    site_admin: boolean // false\n  }\n  html_url: string //'https://github.com/GiovanniCardamone/fastify-autoroutes'\n  description: string //'Map directory structure to routes url'\n  fork: boolean // false\n  url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes'\n  forks_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/forks'\n  keys_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/keys{/key_id}'\n  collaborators_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/collaborators{/collaborator}'\n  teams_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/teams'\n  hooks_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/hooks'\n  issue_events_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/issues/events{/number}'\n  events_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/events'\n  assignees_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/assignees{/user}'\n  branches_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/branches{/branch}'\n  tags_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/tags'\n  blobs_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/git/blobs{/sha}'\n  git_tags_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/git/tags{/sha}'\n  git_refs_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/git/refs{/sha}'\n  trees_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/git/trees{/sha}'\n  statuses_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/statuses/{sha}'\n  languages_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/languages'\n  stargazers_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/stargazers'\n  contributors_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/contributors'\n  subscribers_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/subscribers'\n  subscription_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/subscription'\n  commits_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/commits{/sha}'\n  git_commits_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/git/commits{/sha}'\n  comments_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/comments{/number}'\n  issue_comment_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/issues/comments{/number}'\n  contents_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/contents/{+path}'\n  compare_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/compare/{base}...{head}'\n  merges_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/merges'\n  archive_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/{archive_format}{/ref}'\n  downloads_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/downloads'\n  issues_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/issues{/number}'\n  pulls_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/pulls{/number}'\n  milestones_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/milestones{/number}'\n  notifications_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/notifications{?since,all,participating}'\n  labels_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/labels{/name}'\n  releases_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/releases{/id}'\n  deployments_url: string // 'https://api.github.com/repos/GiovanniCardamone/fastify-autoroutes/deployments'\n  created_at: string // '2020-08-06T09:26:13Z'\n  updated_at: string // '2020-08-10T17:40:24Z'\n  pushed_at: string // '2020-08-10T17:07:34Z'\n  git_url: string // 'git://github.com/GiovanniCardamone/fastify-autoroutes.git'\n  ssh_url: string // 'git@github.com:GiovanniCardamone/fastify-autoroutes.git'\n  clone_url: string // 'https://github.com/GiovanniCardamone/fastify-autoroutes.git'\n  svn_url: string // 'https://github.com/GiovanniCardamone/fastify-autoroutes'\n  homepage: string //''\n  size: number // 141\n  stargazers_count: number // 2\n  watchers_count: number //2\n  language: string //'JavaScript'\n  has_issues: boolean // true\n  has_projects: boolean // true\n  has_downloads: boolean // true\n  has_wiki: boolean // true\n  has_pages: boolean // true\n  forks_count: number // 0\n  mirror_url: null\n  archived: boolean // false\n  disabled: boolean // false\n  open_issues_count: number // 0\n  license: {\n    key: string // 'mit'\n    name: string // 'MIT License'\n    spdx_id: string // 'MIT'\n    url: string // 'https://api.github.com/licenses/mit'\n    node_id: string // 'MDc6TGljZW5zZTEz'\n  }\n  forks: number // 0\n  open_issues: number // 0\n  watchers: number // 2\n  default_branch: boolean // 'master'\n  temp_clone_token: null\n  network_count: number // 0\n  subscribers_count: number // 1\n}\n","import React from 'react'\n\ninterface NoMatchProps {}\n\nexport default function NoMatch({}: NoMatchProps) {\n  return null\n}\n","import React, { Fragment, useState, useEffect } from 'react'\nimport { HashRouter, Route, Switch, Link, Redirect } from 'react-router-dom'\n\nimport pages from './assets/pages'\nimport projects, { Project, GitHubProject } from './assets/projects'\n\nimport Box from '@material-ui/core/Box'\nimport Avatar from '@material-ui/core/Avatar'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Drawer from '@material-ui/core/Drawer'\nimport Divider from '@material-ui/core/Divider'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport SvgIcon from '@material-ui/core/SvgIcon'\nimport Badge from '@material-ui/core/Badge'\nimport Typography from '@material-ui/core/Typography'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\nimport makeStyles from '@material-ui/core/styles/makeStyles'\n\nimport NoMatch from './pages/NoMatch'\n\nimport DefaultProjectIcon from '@material-ui/icons/Computer'\n\nconst drawerWidth = 240\nconst useAppStyle = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  appbar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  toolbar: {},\n  avatar: {\n    marginRight: theme.spacing(1),\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  drawerlink: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  drawerSeparator: {\n    backgroundColor: theme.palette.grey[100],\n  },\n  content: {\n    flexGrow: 1,\n    marginLeft: drawerWidth,\n    padding: theme.spacing(3),\n  },\n}))\n\ninterface StarProps {\n  project: Project\n}\n\nconst ProjectItem = ({ project }: StarProps) => {\n  const [info, setInfo] = useState<GitHubProject>()\n\n  useEffect(() => {\n    fetch(`https://api.github.com/repos/${project.owner}/${project.repo}`)\n      .then((r) => r.json())\n      .then((r) => {\n        setInfo(r)\n      })\n  }, [project])\n\n  return (\n    <ListItem button onClick={() => window.open(project.url, '_blank')}>\n      {info !== undefined ? (\n        <Fragment>\n          <ListItemIcon>\n            <Badge badgeContent={info.stargazers_count} color='secondary'>\n              {project.icon ? project.icon : <DefaultProjectIcon />}\n            </Badge>\n          </ListItemIcon>\n          <ListItemText primary={info.name} />\n        </Fragment>\n      ) : (\n        <Box width={1}>\n          <Skeleton variant='text' animation='wave' height={10} width='96%' />\n          <Skeleton variant='text' animation='wave' height={10} width='38%' />\n        </Box>\n      )}\n    </ListItem>\n  )\n}\n\ninterface AppProps {}\n\nexport default function App() {\n  const classes = useAppStyle()\n\n  return (\n    <div className={classes.root}>\n      <HashRouter>\n        <AppBar className={classes.appbar}>\n          <Toolbar className={classes.toolbar}>\n            <Avatar\n              className={classes.avatar}\n              src='https://avatars0.githubusercontent.com/u/5117748?s=460&u=d3e29f822ff593d2e796a3c69f3ef58dabf0733a&v=4'\n            />\n            <Typography variant='h6'>Giovanni Cardamone</Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant='permanent'\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <Toolbar />\n          <div className={classes.drawerContainer}>\n            <List>\n              {pages.map((page, pageIndex) => (\n                <Link key={pageIndex} to={page.url} className={classes.drawerlink}>\n                  <ListItem button>\n                    <ListItemIcon>\n                      <SvgIcon component={page.icon} />\n                    </ListItemIcon>\n                    <ListItemText primary={page.name} />\n                  </ListItem>\n                </Link>\n              ))}\n            </List>\n            <Divider />\n            <Box className={classes.drawerSeparator}>\n              <Typography align='center' variant='subtitle2'>\n                MY GITHUB PROJECTS\n              </Typography>\n            </Box>\n            <List>\n              {projects.map((project, projectIndex) => (\n                <ProjectItem key={projectIndex} project={project} />\n              ))}\n            </List>\n          </div>\n        </Drawer>\n        <main className={classes.content}>\n          <Toolbar />\n          <Switch>\n            <Route exact path='/'>\n              <Redirect to='/home' />\n            </Route>\n\n            {pages.map(({ url, Component }, pageIndex) => (\n              <Route key={pageIndex} exact path={url} render={() => <Component />} />\n            ))}\n\n            <Route path='*'>\n              <NoMatch />\n            </Route>\n          </Switch>\n        </main>\n      </HashRouter>\n    </div>\n  )\n}\n","import { red } from '@material-ui/core/colors'\nimport { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: '#5E66D3',\n    },\n    secondary: {\n      main: '#00838f',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nimport { ThemeProvider } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport theme from './assets/theme'\n\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}